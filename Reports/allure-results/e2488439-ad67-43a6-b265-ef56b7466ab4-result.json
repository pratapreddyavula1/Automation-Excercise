{"name": "test_productpage", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//input[@name='name_on_card']\"}\n  (Session info: chrome=141.0.7390.123); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x0xd3fe43+66515]\n\tGetHandleVerifier [0x0xd3fe84+66580]\n\t(No symbol) [0x0xb2dc48]\n\t(No symbol) [0x0xb78704]\n\t(No symbol) [0x0xb78aab]\n\t(No symbol) [0x0xbbf482]\n\t(No symbol) [0x0xb9b214]\n\t(No symbol) [0x0xbbcba7]\n\t(No symbol) [0x0xb9afc6]\n\t(No symbol) [0x0xb6c2ca]\n\t(No symbol) [0x0xb6d154]\n\tGetHandleVerifier [0x0xf97353+2521315]\n\tGetHandleVerifier [0x0xf922d3+2500707]\n\tGetHandleVerifier [0x0xd67c94+229924]\n\tGetHandleVerifier [0x0xd581f8+165768]\n\tGetHandleVerifier [0x0xd5ecad+193085]\n\tGetHandleVerifier [0x0xd48158+100072]\n\tGetHandleVerifier [0x0xd482f0+100480]\n\tGetHandleVerifier [0x0xd325aa+11066]\n\tBaseThreadInitThunk [0x0x76915d29+25]\n\tRtlInitializeExceptionChain [0x0x779c91eb+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x779c9171+561]", "trace": "self = <TestCases.test_productpage.Test_pageProduct object at 0x0000026F1CD1D550>\n\n    def test_productpage(self):\n        \"\"\"Login\"\"\"\n        # self.login.click_signup_login()\n        # self.login.enter_email()\n        # self.login.enter_password()\n        # self.login.click_login_button()\n        # self.login.is_login_successful()\n    \n        \"\"\"Product flow\"\"\"\n        self.product.click_products()\n        self.product.search_product(\"tshirt\")\n        self.product.click_searchicon()\n    \n    \n        \"\"\"capturing Product which price <=1000 Prices\"\"\"\n    \n        for element in self.product.capture_costofproducts():\n            text = element.get_attribute(\"innerText\").strip()  # remove extra spaces/newlines\n    \n            # Remove currency and extract digits\n            match = re.search(r'(\\d+)',text)\n            if match:\n                price = int(match.group())\n                if price <= 1000:\n                    product_container = self.product.moveto_addtocart(element)\n                    self.product.addtocart_click(product_container)\n                    self.product.continue_shopping()\n    \n    \n    \n        \"\"\"Checkout\"\"\"\n        self.product.checkout()\n        if self.product.if_not_registered():\n            self.product.Register_popUp()\n            self.login.enter_email()\n            self.login.enter_password()\n            self.login.click_login_button()\n            self.login.is_login_successful()\n    \n        \"\"\"Order & Payment\"\"\"\n        # print(\"Total amount:\", self.product.check_totalammount())\n        self.product.place_order()\n>       self.product.payments()\n\nTestCases\\test_productpage.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPageObjectModel\\Product_Purchase.py:109: in payments\n    self.driver.find_element(*self.cvv_input).send_keys(\"123\")\n..\\..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:770: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000026F1CC96C10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...]\\\\n\\\\tRtlInitializeExceptionChain [0x0x779c91eb+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x779c9171+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//input[@name='name_on_card']\"}\nE         (Session info: chrome=141.0.7390.123); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0xd3fe43+66515]\nE       \tGetHandleVerifier [0x0xd3fe84+66580]\nE       \t(No symbol) [0x0xb2dc48]\nE       \t(No symbol) [0x0xb78704]\nE       \t(No symbol) [0x0xb78aab]\nE       \t(No symbol) [0x0xbbf482]\nE       \t(No symbol) [0x0xb9b214]\nE       \t(No symbol) [0x0xbbcba7]\nE       \t(No symbol) [0x0xb9afc6]\nE       \t(No symbol) [0x0xb6c2ca]\nE       \t(No symbol) [0x0xb6d154]\nE       \tGetHandleVerifier [0x0xf97353+2521315]\nE       \tGetHandleVerifier [0x0xf922d3+2500707]\nE       \tGetHandleVerifier [0x0xd67c94+229924]\nE       \tGetHandleVerifier [0x0xd581f8+165768]\nE       \tGetHandleVerifier [0x0xd5ecad+193085]\nE       \tGetHandleVerifier [0x0xd48158+100072]\nE       \tGetHandleVerifier [0x0xd482f0+100480]\nE       \tGetHandleVerifier [0x0xd325aa+11066]\nE       \tBaseThreadInitThunk [0x0x76915d29+25]\nE       \tRtlInitializeExceptionChain [0x0x779c91eb+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x779c9171+561]\n\n..\\..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchElementException"}, "description": "Login", "attachments": [{"name": "stdout", "source": "516d47c9-2706-4bed-bb37-3f19b586bb0a-attachment.txt", "type": "text/plain"}], "start": 1761275898652, "stop": 1761275933965, "uuid": "60c23fe1-6704-446c-9eb6-5cec13835d30", "historyId": "ff05fb3d954ce67c09c6cec07cfe75a9", "testCaseId": "ff05fb3d954ce67c09c6cec07cfe75a9", "fullName": "TestCases.test_productpage.Test_pageProduct#test_productpage", "labels": [{"name": "parentSuite", "value": "TestCases"}, {"name": "suite", "value": "test_productpage"}, {"name": "subSuite", "value": "Test_pageProduct"}, {"name": "host", "value": "Prathu"}, {"name": "thread", "value": "5360-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.test_productpage"}], "titlePath": ["TestCases", "test_productpage.py", "Test_pageProduct"]}